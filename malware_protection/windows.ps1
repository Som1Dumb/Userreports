# Get current hostname
$hostname = $env:COMPUTERNAME

# Get current date
$date = Get-Date -Format "yyyy-MM-dd HH:mm:ss"

# Define report file (stored in the working directory)
$reportFile = "$PWD\malware_report_${hostname}_$(Get-Date -Format 'yyyyMMdd').csv"

# Start CSV file with headers
"Hostname,Software,Installed,Running,Last Update" | Out-File -Encoding utf8 $reportFile

# Function to get installed antivirus software using Windows Security Center
function Get-InstalledAVSoftware {
    $avProducts = Get-CimInstance -Namespace "root/SecurityCenter2" -ClassName "AntivirusProduct" 2>$null
    return $avProducts
}

# Get installed antivirus software
$installedAVs = Get-InstalledAVSoftware

if ($installedAVs) {
    foreach ($av in $installedAVs) {
        $softwareName = $av.displayName
        $runningStatus = if ($av.productState -match '.*00$') { "Running" } else { "Not Running" }
        
        # Extract last update time if available
        $lastUpdate = "Unknown"
        if ($av.timestamp) {
            $lastUpdate = [System.Management.ManagementDateTimeConverter]::ToDateTime($av.timestamp).ToString("yyyy-MM-dd")
        }
        
        # Add entry to CSV
        "$hostname,$softwareName,Yes,$runningStatus,$lastUpdate" | Out-File -Encoding utf8 -Append $reportFile
    }
}

# Check for Windows Defender explicitly
$defenderStatus = Get-MpComputerStatus 2>$null
if ($defenderStatus) {
    $softwareName = "Windows Defender"
    $runningStatus = if ($defenderStatus.AntivirusEnabled) { "Running" } else { "Not Running" }
    $lastUpdate = if ($defenderStatus.AntispywareSignatureLastUpdated) { 
        ($defenderStatus.AntispywareSignatureLastUpdated).ToString("yyyy-MM-dd") 
    } else { 
        "Unknown" 
    }

    # Add entry to CSV
    "$hostname,$softwareName,Yes,$runningStatus,$lastUpdate" | Out-File -Encoding utf8 -Append $reportFile
}

# If no AV software was found
if (-not $installedAVs -and -not $defenderStatus) {
    "$hostname,None Detected,No,Not Installed,Unknown" | Out-File -Encoding utf8 -Append $reportFile
}

Write-Host "Malware protection check completed. Report saved as: $reportFile"
